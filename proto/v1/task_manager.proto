syntax = "proto3";

package cornserve.task_manager;

import "common.proto";

service TaskManager {
  // Configure the task manager to handle a task
  rpc RegisterTask(RegisterTaskRequest) returns (RegisterTaskResponse);

  // Add or remove resources from a task manager
  rpc UpdateResources(UpdateResourcesRequest) returns (UpdateResourcesResponse);

  // Shutdown the task manager
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
  
  // Load management
  rpc GetTaskProfile(GetTaskProfileRequest) returns (GetTaskProfileResponse);
  rpc ReconcileTargetLoad(ReconcileTargetLoadRequest) returns (ReconcileTargetLoadResponse);
  
  // Request routing
  rpc GetRoute(GetRouteRequest) returns (GetRouteResponse);
  
  // Health checking
  rpc Healthcheck(HealthcheckRequest) returns (HealthcheckResponse);
}

// Type of task manager
// Keep in sync with `cornserve.services.task_manager.models.TaskManagerType`
enum TaskManagerType {
  // Multimodal data embedding
  ENCODER = 0;

  // LLM text generation
  LLM = 1;
}

enum ResourceAction {
  // Give more resources
  ADD = 0;

  // Take away resources
  REMOVE = 1;
}

message GPUResource {
  // Whether to add or remove this resource
  ResourceAction action = 1;

  // Node ID of the GPU
  string node_id = 2;

  // Global rank of the GPU
  int32 global_rank = 3;

  // Local rank of the GPU
  int32 local_rank = 4;
}

message RegisterTaskRequest {
  // ID of the task manager
  string task_manager_id = 1;

  // Type of task
  TaskManagerType type = 2;

  // Initial set of GPU resources
  repeated GPUResource gpus = 3;

  // JSON-encoded config generated from the Task Pydantic model
  string config = 4;
}

message RegisterTaskResponse {
  common.Status status = 1;
}

// Update resources
message UpdateResourcesRequest {
  // ID of the task manager
  string task_manager_id = 1;

  // Resources to add or remove
  repeated GPUResource gpus = 2;
}

message UpdateResourcesResponse {
  common.Status status = 1;
}

// Shutdown
message ShutdownRequest {}

message ShutdownResponse {
  common.Status status = 1;
}

// Load management
message ReconcileTargetLoadRequest {
  string task_id = 1;
  float target_load = 2;
}

message ReconcileTargetLoadResponse {
  common.Status status = 1;
  string message = 2;
}

// Task profiling
message ProfilePoint {
  int32 num_gpus = 1;
  float max_sustainable_load = 2;
  DeploymentConfig deployment_config = 3;
}

message DeploymentConfig {
  int32 num_replicas = 1;
  int32 tensor_parallel_degree = 2;
  int32 pipeline_parallel_degree = 3;
  repeated string gpu_assignments = 4;
}

message GetTaskProfileRequest {
  string task_id = 1;
}

message GetTaskProfileResponse {
  repeated ProfilePoint profile_points = 1;
}

// Request routing
message GetRouteRequest {
  // ID of the app that is making the request
  string app_id = 1;

  // ID of the request
  string request_id = 2;

  // Optional routing hint
  // e.g., hash of image URL, system prompt
  optional string routing_hint = 3;
}

message GetRouteResponse {
  // URL of the task executor to route the request to
  string task_executor_url = 1;

  // Sidecar ranks the task executor is registered with
  repeated int32 sidecar_ranks = 2;
}

// Healthcheck response
message TaskExecutorStatus {
  common.Status status = 1;
  repeated int32 sidecar_ranks = 2;
}

message HealthcheckRequest {}

message HealthcheckResponse {
  common.Status status = 1;
  map<string, TaskExecutorStatus> task_executor_statuses = 2;
}
