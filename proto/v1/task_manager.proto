syntax = "proto3";

package cornserve.task_manager;

import "common.proto";

service TaskManager {
  // Configure the task manager to handle a task
  rpc RegisterTask(RegisterTaskRequest) returns (RegisterTaskResponse);

  // Shutdown the task manager
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
  
  // Load management
  rpc GetTaskProfile(GetTaskProfileRequest) returns (GetTaskProfileResponse);
  rpc ReconcileTargetLoad(ReconcileTargetLoadRequest) returns (ReconcileTargetLoadResponse);
  
  // Request routing
  rpc Submit(SubmitRequest) returns (SubmitResponse);
  
  // Health checking
  rpc Healthcheck(HealthcheckRequest) returns (HealthcheckResponse);
}

// Type of task manager
// Keep in sync with `cornserve.services.task_manager.models.BaseTaskManagerConfig`
enum TaskManagerType {
  UNKNOWN = 0;

  // Multimodal data embedding
  ENCODER = 1;

  // LLM text generation
  LLM = 2;
}

message RegisterTaskRequest {
  // ID of the task manager
  string task_manager_id = 1;

  // Type of task
  TaskManagerType type = 2;

  // Initial set of sidecar ranks
  repeated int32 sidecar_ranks = 3;

  // JSON-encoded config generated from the Task Pydantic model
  string config = 4;
}

message RegisterTaskResponse {
  common.Status status = 1;
}

// Shutdown
message ShutdownRequest {}

message ShutdownResponse {
  common.Status status = 1;
}

// Load management
message ReconcileTargetLoadRequest {
  string task_id = 1;
  float target_load = 2;
}

message ReconcileTargetLoadResponse {
  common.Status status = 1;
  string message = 2;
}

// Task profiling
message ProfilePoint {
  int32 num_gpus = 1;
  float max_sustainable_load = 2;
  DeploymentConfig deployment_config = 3;
}

message DeploymentConfig {
  int32 num_replicas = 1;
  int32 tensor_parallel_degree = 2;
  int32 pipeline_parallel_degree = 3;
  repeated string gpu_assignments = 4;
}

message GetTaskProfileRequest {
  string task_id = 1;
}

message GetTaskProfileResponse {
  repeated ProfilePoint profile_points = 1;
}

// Request routing
message Request {
  string task_id = 1;
  bytes payload = 2;
  string request_id = 3;
  map<string, string> metadata = 4;
}

message Response {
  bytes result = 1;
  common.Status status = 2;
  string message = 3;
}

message SubmitRequest {
  Request request = 1;
  string callback_success_endpoint = 2;
  string callback_failure_endpoint = 3;
}

message SubmitResponse {
  string request_id = 1;
  common.Status status = 2;
}

// Healthcheck response
message TaskExecutorStatus {
  common.Status status = 1;
  repeated int32 sidecar_ranks = 2;
}

message HealthcheckRequest {}

message HealthcheckResponse {
  common.Status status = 1;
  map<string, TaskExecutorStatus> task_executor_statuses = 2;
}
