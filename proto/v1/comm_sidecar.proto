syntax = "proto3";

package cornserve.comm_sidecar;

import "common.proto";

service CommSidecar {
  rpc Send(SendRequest) returns (SendResponse);
  rpc Receive(ReceiveRequest) returns (ReceiveResponse);
  rpc MarkDone(MarkDoneRequest) returns (MarkDoneResponse);
  rpc RegisterSender(RegisterSenderRequest) returns (RegisterResponse);
  rpc RegisterReceiver(RegisterReceiverRequest) returns (RegisterResponse);
  rpc RegisterReader(RegisterReaderRequest) returns (RegisterResponse);

  rpc PrepareReceive(PrepareReceiveRequest) returns (PrepareReceiveResponse);

  rpc CheckHealth(CheckHealthRequest) returns (CheckHealthResponse);
  rpc ReportMemory(ReportMemoryRequest) returns (ReportMemoryResponse);
  // TODO: add unregister
}

message SendRequest {
  string id = 1;
  int32 size = 2;
  int32 slot = 3;
  bytes ipc_handle = 4;
  int32 chunk_id = 5;
  int32 num_chunks = 6;
  repeated int32 dst_ranks = 7;
  int32 chunk_size = 8;
  int32 shard_offset = 9;
}

message SendResponse {
  common.Status status = 1;
}

message ReceiveRequest {
  // -1 or error
  string id = 1;
}

message ReceiveResponse {
  // -1 or error
  int32 offset = 1;
  int32 size = 2;
}

message MarkDoneRequest {
  string id = 1;
}

message MarkDoneResponse {
  common.Status status = 1;
}

message RegisterSenderRequest {
  int32 slot_size = 1;
  string dtype = 2;
  int32 shard_rank = 3;
  int32 num_shards = 4;
  int32 layout = 5;
}

message RegisterReceiverRequest {
  int32 slot_size = 1;
  string dtype = 2;
  int32 layout = 3;
  // the sidecar ranks of the group
  repeated int32 peers = 4;
}

message RegisterReaderRequest {
}

message RegisterResponse {
  // returns -1 on err
  // these are needed for init_shmem
  int32 shm_size = 1;
  repeated int32 local_ranks = 2;
  int32 num_local_sidecars = 3;
}

message PrepareReceiveRequest {
  string id = 1;
  int32 shard_size = 2;
  string dtype = 3;
  int32 shard_rank = 4;
  int32 num_shards = 5;
  int32 chunk_size = 6;
  int32 num_chunks = 7;
  int32 chunk_id = 9;
  int32 src_rank = 10;
  int32 shard_offset = 11;
  int32 layout = 12;
}

message PrepareReceiveResponse {
  common.Status status = 1;
}

enum HealthStatus {
  HEALTH_ALL_GOOD = 0;
  HEALTH_MEMORY_PRESSURE = 1;
  // This is for a revived or uninitialized sidecar.
  HEALTH_OFFLINE = 2;
}

message CheckHealthRequest {
}

message CheckHealthResponse {
  HealthStatus status = 1;
}

message ReportMemoryRequest {
  int32 pressure = 1;
}

message ReportMemoryResponse {
  common.Status status = 1;
}
