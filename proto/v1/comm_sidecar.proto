syntax = "proto3";

package cornserve.comm_sidecar;

enum Mode {
  SEND = 0;
  RECV = 1;
}

import "common.proto";

service CommSidecar {
  rpc Send(SendRequest) returns (SendResponse);
  rpc Receive(ReceiveRequest) returns (ReceiveResponse);
  rpc MarkDone(MarkDoneRequest) returns (MarkDoneResponse);
  rpc RegisterSender(RegisterSenderRequest) returns (RegisterResponse);
  rpc RegisterReceiver(RegisterReceiverRequest) returns (RegisterResponse);
  rpc Unregister(UnregisterRequest) returns (UnregisterResponse);

  rpc PrepareReceive(PrepareReceiveRequest) returns (PrepareReceiveResponse);
  // TODO: add unregister
}

message SendRequest {
  int32 chunk_slot = 1;
  bytes ipc_handle = 2;
  int32 request_id = 3;
  int32 chunk_id = 4;
  int32 num_chunks = 5;
  int32 shard_rank = 6;
  int32 num_shards = 7;
  int32 dst_sidecar_rank = 8;
}

message SendResponse {
  common.Status status = 1;
}

message ReceiveRequest {
  // -1 or error
  int32 request_id = 1;
}

message ReceiveResponse {
  // -1 or error
  int32 slot = 1;
}

message MarkDoneRequest {
  int32 request_id = 1;
}

message MarkDoneResponse {
  common.Status status = 1;
}

message RegisterSenderRequest {
  repeated int32 chunk_shape = 1;
  string dtype = 2;
  int32 shard_rank = 3;
  int32 num_shards = 4;
  int32 layout = 5;
}

message RegisterReceiverRequest {
  repeated int32 shape = 1;
  string dtype = 2;
}

message RegisterResponse {
  // returns -1 on err
  int32 gpu_rank = 1;
}

message UnregisterRequest {
}

message UnregisterResponse {
  common.Status status = 1;
}

message PrepareReceiveRequest {
  int32 request_id = 1;
  int32 chunk_id = 2;
  int32 num_chunks = 3;
  string dtype = 4;
  int32 shard_rank = 5;
  int32 num_shards = 6;
  int32 src_sidecar_rank = 7;
  int32 layout = 8;
}

message PrepareReceiveResponse {
  common.Status status = 1;
}
